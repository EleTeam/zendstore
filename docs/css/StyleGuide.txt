STYLE GUIDE for framework.zend.com
=======================================================================

=======================================
1. CONTENT PAGES
=======================================

1.1 General Notes
=================

All paragaphs should be contained within paragraph tags (<p>...</p>).
The new design uses CSS to style paragraphs, so not using them can break
the style.

All references to images should begin with a leading slash to ensure
that relative lookups work correctly (ie., "/images/feature.gif" vs.
"images/feature.gif").

1.2 Page Title
==============

The page title should appear in a construct like the following:

    <div class="heading">
        <h2 class="heading-internal">...</h2>
    </div>

This allows the title to be decorated with the flash utility such that
it renders with the specific font and colors requested with the design.

1.3 First Paragraph
===================

The first paragraph of each page should have a class of "first":

    <p class="first">...</p>

Additionally, it should typically be followed with a "dotted line":

    <div class="dotted-line"></div>

Combined, they will allow the first paragraph to be rendered with a
different style, and then set apart from the rest of the content.

1.4 Features List
=================

Some pages have a list of 3 *features* that have associated icons. These
can be listed horizontally with icons using the following construct:

    <ul class="list-features">
        <li class="feature1"><img src="/images/icon_feature1.gif" 
            width="41" height="38" alt="" />Extensible 
            and<br />well-tested code base</li>
        <li class="feature2"><img src="/images/icon_feature2.gif" 
            width="28" height="39" alt="" />Flexible architecture</li>
        <li class="feature3"><img src="/images/icon_feature3.gif" 
            width="34" height="34" alt="" />No configuration 
            files<br />necessary to get going</li>
    </ul>

In summary: the <ul> element should have a class of "list-features", and
each list item should have a class of "feature<X>", where X is the order
in which it appears. Each item should also have an image associated, and
it should be placed *before* the text of the item.

1.5 Sub-Headings
================

Sub-Headings should be level <h2> or smaller (i.e., <h3>, <h4>, etc.).

1.6 Lists
=========

Most lists should have a class named after the list type (unless they
are a feature list as detailed in 1.4, above):

    <ul class="ul">...</ul>

    <ol class="ol">...</ol>

1.6.1 Bold segments in lists

Often, you will want to list the first word or phrase of a list item in
bold. The current stylesheet has you do so by using a <span> tag:

    <ul class="ul">
        <li><span>AJAX</span> support through...</li>
        <li><span>Search</span> - a native PHP edition...</li>
        ...
    </ul>

=======================================
2. Subnavs
=======================================

2.1 General Notes
=================

Most sections have a subnav. Within the site, we're now using a
placeholder to store the subnav so that it can be rendered in the master
layout.

2.2 The sub-nav placeholder
===========================

The placeholder() view helper is used to capture and store the subnav
for use later in the layout template. Initiate it as follows:

    <? $this->placeholder('sub-nav')->captureStart() ?>
    ... sub nav goes here
    <? $this->placeholder('sub-nav')->captureEnd() ?>

The sub-nav placeholder is initialized within application.php, and will
automatically place the appropriate <div> and <ul> tags to start and end
the navigation list; you will simply need to put in the individual list
items.

2.2 List Items
==============

List items should indicate whether they are active, and include an arrow
and an optional divider (the last item will not have a divider). The
'active' status can be determined by querying the 'active' variable:

    <?= $this->active == 'overview' ? ' class="current"' : '' ?> 

As an example of a full list item:

    <li <?= $this->active == 'overview' ? ' class="current"' : '' ?>><a 
        href="/whyzf/overview">Overview</a><span class="divider">|</span><span 
        class="arrow">&nbsp;</span></li>

2.3 Example
===========

What follows is a sample sidebar from the "Why ZF?" section of the site,
detailing usage of the sub-nav placeholder, marking items as active, and
showing how the final item omits a divider:

    <? $this->placeholder('sub-nav')->captureStart() ?>
        <li <?= $this->active == 'overview' ? ' class="current"' : '' ?>><a 
            href="/whyzf/overview">Overview</a><span class="divider">|</span><span 
            class="arrow">&nbsp;</span></li>
        <li <?= $this->active == 'featuresbenefits' ? ' class="current"' : '' ?>><a 
            href="/whyzf/featuresbenefits">Features &amp; Benefits</a><span class="divider">|</span><span 
            class="arrow">&nbsp;</span></li>
        <li <?= $this->active == 'casestudies' ? ' class="current"' : '' ?>><a 
            href="/whyzf/casestudies">Case Studies</a><span class="divider">|</span><span 
            class="arrow">&nbsp;</span></li>
        <li <?= $this->active == 'future' ? ' class="current"' : '' ?>><a 
            href="/whyzf/future">Roadmap</a><span class="arrow">&nbsp;</span></li>
    <? $this->placeholder('sub-nav')->captureEnd() ?>

=======================================
3. Sidebars
=======================================

3.1 General Notes
=================

Just as with content, all block content should contain semantic XHTML --
in other words, all content should be contained within block level tags.
Please use paragraphs (<p>...</p>), lists, and, if necessary, divs
(<div>...</div>) when marking up content for sidebars.

Always use the RightNav view helper for adding blocks to the sidebar.
This ensures they get placed in the appropriate placeholder and thus
loaded into the master layout.

3.2 The RightNav view helper
============================

A new view helper, rightNav() has been created to help facilitate
creation of blocks for the sidebar. In most cases, you'll want to create
your sidebar elements with a construct like the following:

    <? $this->rightNav()->captureStart('append', 'Support, Training & Consulting') ?>
            <ul class="nav">
                <li><a href="/support/support">Support</a></li>
                <li><a href="/support/training">Training</a></li>
                <li><a href="/support/consulting">Consulting</a></li>
            </ul>
    <? $this->rightNav()->captureEnd() ?>

The arguments to captureStart() are:
 
  * placement: either 'append', 'prepend', or 'set'. 'append' places at
    the end of the sidebar, 'prepend' places at the beginning, and 'set'
    overwrites with the provided content.

  * title: the title of the block being captured
  
  * contentClass: the CSS class to use for the content container within
    the block. By default, this is 'block-in'.

You can also simply pass content to the helper, using any of the
following methods:

  * prependBlock($title, $content, $contentClass = 'block-in')
  * appendBlock($title, $content, $contentClass = 'block-in')
  * setBlock($title, $content, $contentClass = 'block-in')

In each case, a block is created with the correct markup, using the
content provided.

3.3 List types
==============

List types follow the rules established in section 1.6 (Lists), and add
one additional class: 'nav'. The 'nav' class is used when creating a
block that contains a menu of links:

    <ul class="nav">
        <li><a href="#">Zend Framework License</a></li>
        <li><a href="#">Contributors License Agreement</a></li>
    </ul>


=======================================================================
vim: set tw=72:
